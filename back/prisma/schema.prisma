// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
    id               Int                @id @default(autoincrement())
    role             Role               @default(USER)
    firstName        String             @map("first_name")
    lastName         String             @map("last_name")
    numberphone      String?            @map("number_phone")
    email            String             @unique
    password         String
    shipping_Address Shipping_Address[]
    order            Order[]
}

model Shipping_Address {
    id            Int     @id @default(autoincrement())
    firstName     String  @map("first_name")
    lastName      String  @map("last_name")
    phone         String
    email         String?
    address       String
    province      String
    district      String
    user          User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        Int     @map("user_id")
}

model Order_product {
    id         Int      @id @default(autoincrement())
    quantity   Int      @default(1)
    order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId    Int      @map("order_id")
    seafood    Seafood  @relation(fields: [seafoodId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    seafoodId  Int      @map("seafood_id")
}

model Order {
    id               Int             @id @default(autoincrement())
    totalphone       Int             @map("total_phone")
    user             User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId           Int             @map("user_id")
    quantity         Int
    payment       Payment[]
    OrderProduct  Order_product[]
}


model Seafood {
    id            Int      @id @default(autoincrement())
    shrimp        Int
    shellfish     Int
    crab          Int
    fishType      Int      @map("fish_type")
    quantity      Int
    OrderProduct  Order_product[]
    
}

model Payment {
    id            Int      @id @default(autoincrement())
    orderQuantity Int      @map("order_quantity")
    paymentDate   DateTime @default(now()) @map("payment_date")
    paymentMethod String   @map("payment_method")
    amountPaid    Float    @map("amount_paid")
    order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    orderId       Int
}